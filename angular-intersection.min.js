!function(){"use strict"
function r(){var r=function(){var r={}
r.oA=function(r){return r.start},r.AB=function(r){var n=r.start,t=r.end
return{x:t.x-n.x,y:t.y-n.y}},r.add=function(r,n){return{x:r.x+n.x,y:r.y+n.y}},r.sub=function(r,n){return{x:r.x-n.x,y:r.y-n.y}},r.scalarMult=function(r,n){return{x:r*n.x,y:r*n.y}},r.crossProduct=function(r,n){return r.x*n.y-n.x*r.y}
var n={}
return n.vector=function(n){return r.AB(n)},n.intersectSegments=function(n,t){var e=r.oA(n),s=r.AB(n),c=r.oA(t),i=r.AB(t),o=r.crossProduct(s,i),u=r.sub(c,e),a=r.crossProduct(u,i),l=a/o,f=r.add(e,r.scalarMult(l,s))
return f},n.isParallel=function(n,t){var e=r.AB(n),s=r.AB(t)
return 0===r.crossProduct(e,s)},n.isCollinear=function(n,t){var e=r.oA(n),s=r.AB(n),c=r.oA(t)
r.AB(t)
return 0===r.crossProduct(r.sub(e,c),s)},n.safeIntersect=function(r,t){return n.isParallel(r,t)===!1&&n.intersectSegments(r,t)},n}
return r.intersectSegments=r().intersectSegments,r.intersect=r().safeIntersect,r.isParallel=r().isParallel,r.isCollinear=r().isCollinear,r.describe=function(n,t){var e=r().isCollinear(n,t),s=r().isParallel(n,t),c=void 0
return s===!1&&(c=r().intersectSegments(n,t)),{collinear:e,parallel:s,intersection:c}},r}var n=angular.module("ngIntersection",[])
n.factory("$intersection",r),r.$inject=[]}()
